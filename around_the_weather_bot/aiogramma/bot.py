# —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å aiogram
import logging
import asyncio
from aiogram import Bot, Dispatcher, types

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level='INFO')
# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token='Token')
# —Å–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@dp.message_handler(commands=['start'])  # –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã start
async def bot_start(message: types.Message):
    await message.answer('Hello')  # –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# @dp.message_handler(commands=['test'])
# async def bot_test(message: types.Message):
#     await message.reply('test passed')  # –æ—Ç–≤–µ—Ç
#
#
# @dp.message_handler(commands=['test2'])
# async def bot_test2(message: types.Message):
#     await message.reply('second test passed')


@dp.message_handler(commands=['dice'])
async def bot_dice(message: types.Message):
    await message.answer_dice(emoji='üé≤')  # –∫–∏–¥–∞–µ–º –∫—É–±–∏–∫) –¥–∞, –º–Ω–µ –∑–∞–Ω—è—Ç—å—Å—è –Ω–µ—á–µ–º, –∏ —á—Ç–æ?


@dp.message_handler(commands=['die'])
async def bot_die(message: types.Message):
    await bot.send_dice(12345678, emoji='üé≤')  # –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–±–∏–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID


async def main():
    await dp.start_polling()  # –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è


if __name__ == '__main__':
    asyncio.run(main())
